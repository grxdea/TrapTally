    // src/pages/AuthCallback.tsx
    import React, { useEffect, useState } from 'react';
    import { useNavigate, useSearchParams } from 'react-router-dom';
    // import { usePlaybackStore } from '../store/playbackStore'; // Not needed for this test
    // import axios from 'axios'; // Not needed for this test

    /**
     * TEMPORARY TEST VERSION: Page component to handle the redirect callback from Spotify's Auth Code Flow with PKCE.
     * Logs received parameters and redirects without attempting token exchange.
     */
    const AuthCallback: React.FC = () => {
      const navigate = useNavigate();
      const [searchParams] = useSearchParams();
      // const setToken = usePlaybackStore((state) => state.setSpotifyAccessToken); // Not used in test
      const [error, setError] = useState<string | null>(null);
      const [status, setStatus] = useState<string>('Processing login callback (TEST VERSION)...');

      useEffect(() => {
        console.log('--- AuthCallback (PKCE TEST) - Start ---');
        setStatus('Reading parameters from URL...');

        const code = searchParams.get('code');
        const receivedState = searchParams.get('state');
        const errorParam = searchParams.get('error');

        console.log(`Received code: ${code ? code.substring(0,10)+'...' : 'null'}`);
        console.log(`Received state: ${receivedState || 'null'}`);
        console.log(`Received error: ${errorParam || 'null'}`);

        const codeVerifier = window.sessionStorage.getItem('spotify_code_verifier');
        console.log(`Retrieved code_verifier: ${codeVerifier ? 'OK' : 'MISSING'}`);

        if (errorParam) {
          console.error(`Error from Spotify redirect: ${errorParam}`);
          setError(`Spotify login failed: ${errorParam}`);
          setStatus('Error received from Spotify.');
          // Don't redirect immediately on error in test, just show message
          return;
        }

        if (!code) {
          console.error('Authorization code not found in URL query parameters.');
          setError('Spotify login failed: Missing authorization code.');
          setStatus('Error: Missing code.');
           // Don't redirect immediately on error in test, just show message
          return;
        }

        if (!codeVerifier) {
          console.error('Code verifier not found in sessionStorage.');
          setError('Spotify login failed: Missing code verifier.');
          setStatus('Error: Missing verifier.');
           // Don't redirect immediately on error in test, just show message
          return;
        }

        // --- Token Exchange SKIPPED FOR TEST ---
        setStatus('Parameters received. Skipping token exchange for test. Redirecting...');
        console.log('TEST: Skipping token exchange, navigating to /artists...');
        // Use setTimeout to allow logs to potentially flush before navigation
        setTimeout(() => {
             navigate('/artists', { replace: true });
        }, 100); // Short delay
        // ----------------------------------------

      }, [navigate, searchParams]); // Removed setToken dependency for test

      // Display status or error message
      return (
        <div className="p-4 text-center text-gray-400">
          <p>{status}</p>
          {error && <p className="text-red-500 mt-2">Error details: {error}</p>}
        </div>
      );
    };

    export default AuthCallback;
    