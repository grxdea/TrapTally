
// src/components/TrackRow.tsx

import React from "react";
import { Link } from "react-router-dom";
import { Track } from "./index";                     
import { useSpotify } from "@/context/SpotifyContext";  
import { playTrack } from "@/services/spotify/player";  
import { PlayIcon, Pause, Volume2 } from "lucide-react";

interface TrackRowProps {
  track: Track;
}

export const TrackRow: React.FC<TrackRowProps> = ({ track }) => {
  const { currentTrack, isPlaying } = useSpotify();

  const isCurrentTrack = currentTrack === `spotify:track:${track.id}`;

  const handlePlayClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    console.log("▶️ TrackRow click:", { uri: track.uri });
    playTrack(track.uri);
  };
  
  // Split artist names and convert to links
  const renderArtistLinks = () => {
    if (!track.artist) return null;
    
    // Split by comma and handle "feat.", "&", and other separators
    const artistNames = track.artist.split(/,\s*|\s+&\s+|\s+and\s+/);
    
    return artistNames.map((name, index) => {
      const artistSlug = name.toLowerCase().replace(/\s+/g, '-');
      
      return (
        <React.Fragment key={`${track.id}-artist-${index}`}>
          {index > 0 && ", "}
          <Link 
            to={`/artists/${artistSlug}`}
            className="hover:underline"
            onClick={(e) => e.stopPropagation()}
          >
            {name}
          </Link>
        </React.Fragment>
      );
    });
  };

  return (
    <div
      className={`flex w-full items-center px-12 py-2 hover:bg-white/10 text-white transition-colors ${
        isCurrentTrack ? "bg-white/5" : ""
      }`}
      onClick={handlePlayClick}
    >
      <div className="flex w-[30%] items-center gap-4 group cursor-pointer">
        <div className="w-16 h-16 flex-shrink-0 relative">
          <img
            src={track.cover}
            alt={track.title}
            className="w-full h-full object-cover"
          />
          <div className="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 flex items-center justify-center transition-opacity">
            {isCurrentTrack && isPlaying ? (
              <Pause className="text-white w-8 h-8" />
            ) : (
              <PlayIcon className="text-white w-8 h-8" />
            )}
          </div>
          {isCurrentTrack && (
            <div className="absolute bottom-0 right-0 bg-[#1ED760] p-1 rounded-tl">
              <Volume2 className="text-black w-3 h-3" />
            </div>
          )}
        </div>
        <div className="text-base font-normal">{track.title}</div>
      </div>
      <div className="w-[20%] text-base font-normal text-left">
        {renderArtistLinks()}
      </div>
      <div className="w-[20%] text-base font-normal text-left">
        {track.album}
      </div>
      <div className="w-[15%] text-base font-normal text-center">
        {track.released}
      </div>
      <div className="w-[15%] text-base font-normal text-center">
        {track.year}
      </div>
    </div>
  );
};
